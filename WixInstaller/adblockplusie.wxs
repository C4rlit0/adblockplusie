<?xml version="1.0" encoding="UTF-8"?>
<!--
    Compilation Note:
    You may see linking errors that look like these: 
        <quote>LGHT0217 : Error executing ICE action 'ICExx' [...] The error code is 2738.</quote>
    The documentation for this error code talks about custom actions,
        even though the CustomAction keyword does not appear in this source.
    Certain WiX elements are implemented by MSI custom actions,
        which means this source implicitly declares some insofar as the Windows Installer sees it.
    These errors are benign and can be avoided by some fiddling with the registry on the development machine.
    See http://wix.sourceforge.net/faq.html#Error217
-->

<!-- 
    sys.BUILDARCH is set by the command line argument '-arch'.
    The default value to "x86"
-->
<?if $(sys.BUILDARCH)="x86"?>
    <?define Minimum_Version="100"?>
    <?define Program_Files="ProgramFilesFolder"?>
<?elseif $(sys.BUILDARCH)="x64"?>
    <?define Minimum_Version="200"?>
    <?define Program_Files="ProgramFiles64Folder"?>
<?else?>
    <?error Unsupported value of sys.BUILDARCH=$(sys.BUILDARCH)?>
<?endif?>

<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
    <Product Name="!(loc.ProductName)"
        Manufacturer="Eyeo GmbH"
        Version="0.8.0"
        Language="!(loc.LANG)" Codepage="1252"
        Id="4f27c814-5ee0-4b25-b3ab-3ad565551918"
        UpgradeCode="3a8e3ab4-762d-4641-806e-2dccb953d73f">

        <Package Id="*"
            Keywords="!(loc.Keywords)"
            Description="!(loc.Description)"
            Comments="!(loc.Comments)"
            InstallerVersion="$(var.Minimum_Version)"
            Languages="!(loc.LANG)" SummaryCodepage="!(loc.CODEPAGE)"
            Compressed="yes"
            InstallScope="perMachine" InstallPrivileges="elevated"
        />
        <MajorUpgrade DowngradeErrorMessage="!(loc.AlreadyInstalled)" />
        <MediaTemplate EmbedCab="yes"/>

        <!--
            User interface
        -->
        <UIRef Id="custom_WixUI_InstallDir"/>
        <UIRef Id="WixUI_ErrorProgressText"/>
        <Property Id="WIXUI_INSTALLDIR" Value="INSTALLFOLDER"/>

        <!--
            We have only a single feature, since there aren't any optional parts.
            The display is hidden for the same reason; there's nothing to choose from.
        -->
        <Feature Id="ProductFeature"
            Title="!(loc.Title)" Description="!(loc.UI_Description)"
            Display="hidden"
            ConfigurableDirectory="INSTALLFOLDER">
            <ComponentGroupRef Id="Installation_Folders"/>
            <ComponentGroupRef Id="Binaries"/>
            <ComponentGroupRef Id="HTML_Tree"/>
            <ComponentGroupRef Id="INI_Files"/>
        </Feature>

    	<!--
    		Remove the "Modify" button from our control panel entry.
    		Since we only have a single feature, there's only a single way of installing the plugin,
    			and thus modifying the installation can't possibly do anything.
            This is currently set by the WiXUI property WIXUI_INSTALLDIR, so it's commented out now.
    	    <Property Id="ARPNOMODIFY" Value="1"/>
    	 -->

    	<!--
    		The application data folder has to vary by operating system version.
    		With Vista and later, we have to use an application data folder suitable for low-integrity applications.
    		XP and earlier don't have UAC and we use the regular application data folder.
    	-->
    	<Property Id="LOCAL_LOW_APP_DATA_FOLDER">
    		<!-- There's no built-in property with this name, so we need to extract its value from the registry. -->
    		<RegistrySearch Id="RUMK"
                Root="HKCU" Key="Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders"
    			Name="{A520A1A4-1780-4FF6-BD18-167343C5AF16}"
                Type="raw"/>
    	</Property>
    	<SetDirectory Id="APP_DATA_FOLDER" Action="SetHTMLFOLDER1"
    		Value="[LOCAL_LOW_APP_DATA_FOLDER]">
    		<![CDATA[ VersionNT >= 600 ]]>
    	</SetDirectory>
    	<SetDirectory Id="APP_DATA_FOLDER" Action="SetHTMLFOLDER2"
    		Value="[AppDataFolder]">
    		<![CDATA[ VersionNT < 600 ]]>
    	</SetDirectory>

        <!--
            We record the locations of directories in the registry.
            Each directory requires both a property and a component representing the registry key for that property.
            For more explanation, see http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern
        -->
        <ComponentGroup Id="Installation_Folders">
            <ComponentRef Id="ABP_AppData_Folder.component"/>
            <ComponentRef Id="Install_Folder.component"/>
        </ComponentGroup>
        <Property Id="ABP_APPDATA_FOLDER">
            <RegistrySearch Id="Registry_Read_ABP_AppData_Folder"
                Root="HKCU" Key="SOFTWARE\AdblockPlus"
                Name="AppDataFolder" Type="raw"/>
        </Property>
        <Component Id="ABP_AppData_Folder.component" Directory="ABP_APPDATA_FOLDER">
            <RegistryValue
                Root="HKCU" Key="SOFTWARE\AdblockPlus"
                Name="AppDataFolder" Type="string"
                Value="[ABP_APPDATA_FOLDER]"/>
        </Component>
        <!--
            Testing the 32-bit install on a 64 bit OS will cause these entries to be written under Wow6432Node.
            It should be transparent to the application code, but in case it's not ...
            See http://stackoverflow.com/questions/1882024/wix-will-not-add-hklm-registry-setting-during-windows-7-install
        -->
        <Property Id="INSTALLFOLDER">
            <RegistrySearch Id="Registry_Read_Install_Folder"
                Root="HKLM" Key="Software\Adblock Plus for IE\0.8.0"
                Name="InstallFolder" Type="raw"/>
        </Property>
        <Component Id="Install_Folder.component" Directory="INSTALLFOLDER">
            <RegistryKey Root="HKLM" Key="Software\Adblock Plus for IE">
                <RegistryKey Key="0.8.0">
                    <RegistryValue
                        Name="InstallFolder" Type="string"
                        Value="[INSTALLFOLDER]"/>
                </RegistryKey>
            </RegistryKey>
        </Component>


    	<!--
            The top-level directory structure.
        -->
    	<Directory Id="TARGETDIR" Name="SourceDir">
            <Directory Id="$(var.Program_Files)">
                <!--
                    INSTALLFOLDER is within ProgramFilesFolder, which is a protected directory.
                    As a result, this installer requires elevated permissions to operate.
                -->
                <Directory Id="INSTALLFOLDER" Name="Adblock Plus for IE"></Directory>
                <Directory Id="APP_DATA_FOLDER">
                    <Directory Id="ABP_APPDATA_FOLDER" Name="AdblockPlus">
                        <Directory Id="HTML_Folder" Name="html">
                        </Directory>
                    </Directory>
                </Directory>
            </Directory>
        </Directory>

        <!--
            The Binaries component group contains the DLL's.
            64-bit versions of Windows ship with both 32-bit and 64-bit versions of Internet Explorer.
            Each of these versions hosts only its own bit-size objects.
            Therefore, for 64-bit platforms we must install both the 64-bit plugin as well as the 32-bit one.
            For 32-bit platforms, we only need the 32-bit one.
            
            The DLL images are taken directly from the build directory.
            There's no parameter as yet for building an unsigned development version vs. a signed release version.

            Note: We do not use SelfRegCost, which calls the entry point DLLRegisterServer to make registry entries.
            See http://stackoverflow.com/questions/364187/how-do-you-register-a-win32-com-dll-file-in-wix-3
            
            The present installer is a per-machine installer.
            That means it writes to HKEY_LOCAL_MACHINE, so that all users on the machine will have the BHO installed.
            It's possible to write keys to HKEY_CURRENT_USER in a situation where that's not desirable, if needed.
        -->
    	<ComponentGroup Id="Binaries" Directory="INSTALLFOLDER">
            <!--
                The 32-bit version of the DLL is included in both 32- and 64-bit installers. 
                We need an explicit value for attribute @Win64 so that the ARCH argument does not override its implicit value. 
            -->
            <Component Id="AdblockPlus32.dll" Win64="no">
                <File Id="AdblockPlus32.dll" Source="..\build\ia32\Release Production\AdblockPlus.dll" KeyPath="yes" Checksum="yes">
                    <?include dll_class.wxi ?>
                </File>
                <?include bho_registry_value.wxi ?>
            </Component>
            <!--
                The 64-bit version of the DLL is only included in the 64-bit installer. 
                We don't really need an explicit value for attribute @Win64, but it's there for resilience.
                
                Note that the <Class> element and the <RegistryKey> element are duplicated from the 32-bit version.
                We use "include" directives to ensure that they are identical.                
                They have to be the same to support both the 32- and 64-bit versions of Internet Explorer on a 64-bit system.
                IE uses the same algorithm to search for BHO regardless of platform,
                    so with two versions of IE, we need two identical registrations.
                The 32-bit version on a 64-bit system will be registered under "Wow6432Node" translated keys,
                    while the 64-bit version will be under the keys as they appear in this source, not translated.
                We don't need to put in the "Wow6432Node" registry key explicitly;
                    something in Windows Installer takes care of the mapping transparently.
            -->
            <?if $(sys.BUILDARCH)="x64"?>
                <Component Id="AdblockPlus64.dll" Win64="yes">
                    <File Id="AdblockPlus64.dll" Source="..\build\x64\Release Production\AdblockPlusx64.dll" KeyPath="yes" Checksum="yes">
                        <?include dll_class.wxi ?>
                    </File>
                    <?include bho_registry_value.wxi ?>
                </Component>
            <?endif?>
            <!--
                The engine must go into the same directory as the DLL, since that location is searched explicitly (and uniquely).
            -->
            <Component Id="AdblockPlusEngine32.dll" Win64="no">
                <File Id="AdblockPlusEngine32.dll" Source="..\build\ia32\Release Production\AdblockPlusEngine.exe" KeyPath="yes" Checksum="yes"/>
            </Component>
    	</ComponentGroup>
        
        <!--
            The HTML_Tree component group contains all the files in the HTML folder.
            Individual file entries within a single component group must all be in the same directory.
            Also, ComponentGroup is not a valid child of ComponentGroup, so subdirectories are linked by reference.
        -->
        <ComponentGroup Id="HTML_Tree">
            <ComponentRef Id="html_static_css_settings.css"/>
            <ComponentRef Id="html_static_img_abp.128.png"/>
            <ComponentRef Id="html_static_img_background.png"/>
            <ComponentRef Id="html_static_img_bb_disable.png"/>
            <ComponentRef Id="html_static_img_bb_disable_active.png"/>
            <ComponentRef Id="html_static_img_bb_enable.png"/>
            <ComponentRef Id="html_static_img_bb_enable_active.png"/>
            <ComponentRef Id="html_static_img_features_acceptable.png"/>
            <ComponentRef Id="html_static_img_features_language.png"/>
            <ComponentRef Id="html_static_img_features_whitelist.png"/>
            <ComponentRef Id="html_static_img_social_facebook.png"/>
            <ComponentRef Id="html_static_img_social_gplus.png"/>
            <ComponentRef Id="html_static_img_social_twitter.png"/>
            <ComponentRef Id="html_static_js_IESettings.js"/>
            <ComponentRef Id="html_static_js_settings.js"/>
            <ComponentRef Id="html_static_js_vendor_DD.belatedPNG.js"/>
            <ComponentRef Id="html_static_js_vendor_html5shiv.js"/>
            <ComponentRef Id="html_templates_index.html"/>
        </ComponentGroup>

        <DirectoryRef Id="HTML_Folder">
            <Directory Id="html" FileSource="SourceDir\..\html">
                <Directory Name="static" Id="html_static">
                    <Directory Name="css" Id="html_static_css">
                        <Component Id="html_static_css_settings.css"><File Name="settings.css"/></Component>
                    </Directory>
                    <Directory Name="img" Id="html_static_img">
                        <Component Id="html_static_img_abp.128.png"><File Name="abp-128.png"/></Component>
                        <Component Id="html_static_img_background.png"><File Name="background.png"/></Component>
                        <Directory Name="button-background" Id="html_static_img_bb">
                            <Component Id="html_static_img_bb_disable.png"><File Name="disable.png"/></Component>
                            <Component Id="html_static_img_bb_disable_active.png"><File Name="disable_active.png"/></Component>
                            <Component Id="html_static_img_bb_enable.png"><File Name="enable.png"/></Component>
                            <Component Id="html_static_img_bb_enable_active.png"><File Name="enable_active.png"/></Component>
                        </Directory>
                        <Directory Name="features" Id="html_static_img_features">
                            <Component Id="html_static_img_features_acceptable.png"><File Name="acceptable.png"/></Component>
                            <Component Id="html_static_img_features_language.png"><File Name="language.png"/></Component>
                            <Component Id="html_static_img_features_whitelist.png"><File Name="whitelist.png"/></Component>
                        </Directory>
                        <Directory Name="social" Id="html_static_img_social">
                            <Component Id="html_static_img_social_facebook.png"><File Name="facebook.png"/></Component>
                            <Component Id="html_static_img_social_gplus.png"><File Name="gplus.png"/></Component>
                            <Component Id="html_static_img_social_twitter.png"><File Name="twitter.png"/></Component>
                        </Directory>
                    </Directory>
                    <Directory Name="js" Id="html_static_js">
                        <Component Id="html_static_js_IESettings.js"><File Name="IESettings.js"/></Component>
                        <Component Id="html_static_js_settings.js"><File Name="settings.js"/></Component>
                        <Directory Name="vendor" Id="html_static_js_vendor">
                            <Component Id="html_static_js_vendor_DD.belatedPNG.js"><File Name="DD_belatedPNG.js"/></Component>
                            <Component Id="html_static_js_vendor_html5shiv.js"><File Name="html5shiv.js"/></Component>
                        </Directory>
                    </Directory>
                </Directory>
                <Directory Name="templates" Id="html_templates">
                    <Component Id="html_templates_index.html"><File Name="index.html"/></Component>
               </Directory>
            </Directory>
        </DirectoryRef>

        <!--
            INI files

            The settings.ini file should not be installed this way, since it contains user-generated data.
            A component in Windows Installer represents a fixed piece of data with the MSI, not a changing one.
            The present method of making settings.ini a component is simply an expedient for the present,
                not a permanent solution.
            The correct solution requires the application to manage this file; the installer can't do it right.
            See http://stackoverflow.com/questions/357911/manage-configuration-files-with-wix
        -->
        <ComponentGroup Id="INI_Files">
            <ComponentRef Id="ini_settings.page.w.ini"/>
            <ComponentRef Id="ini_dictionary.w.ini"/>
            <ComponentRef Id="ini_settings.ini"/>
        </ComponentGroup>
        <DirectoryRef Id="ABP_APPDATA_FOLDER">
            <Directory Id="ini" FileSource="SourceDir\..\files">
                <Component Id="ini_settings.page.w.ini"><File Name="settings_page_w.ini"/></Component>
                <Component Id="ini_dictionary.w.ini"><File Name="dictionary_w.ini"/></Component>
                <Component Id="ini_settings.ini"><File Name="settings.ini"/></Component>
            </Directory>
        </DirectoryRef>
    </Product>
</Wix>
